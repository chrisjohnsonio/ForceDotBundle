<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>beforeRunningCommand</key>
	<string>saveModifiedFiles</string>
	<key>command</key>
	<string>cd "$TM_PROJECT_DIRECTORY"
. build.properties

if [ ! -f "new.properties" ] 
	then
if [ ${usekeychainaccess} == 'enabled' ]
	then 
	cp build.properties build.bak
	shellpassword=$("${TM_BUNDLE_SUPPORT}/keychain.sh" ${password})
	sed "s/${password}/${shellpassword}/" build.properties &gt; new.properties
	cp new.properties build.properties
fi
fi

echo "&lt;style&gt;body { margin: 0px; padding: 0px; background-color:#efefef }&lt;/style&gt;"
echo "&lt;div style='width:100%;background-image: -webkit-linear-gradient(left , rgb(76,142,255) 12%, rgb(105,199,250) 56%, rgb(255,255,255) 78%);'&gt;&lt;h2&gt;Building Sequential&lt;/h2&gt;&lt;/div&gt;"
echo "&lt;div style='background-color: white; border:1px solid #999; font-family: Tahoma MS, Lucida, Verdana; padding: 5px; color: #666; margin: 2px;'&gt;"
echo "&lt;pre id='output_pre'&gt;"


FILES=*.manifest
for f in $FILES 
do

. $f

rm -R tmp
mkdir tmp
cd tmp
mkdir classes
mkdir components
mkdir pages
mkdir triggers
cd ..

IFS=',' read -ra file &lt;&lt;&lt; "$apex"
for i in "${file[@]}"; do 
	if [ ! -f "${i}.cls-meta.xml" ] 
	then
	echo '&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;ApexClass xmlns="http://soap.sforce.com/2006/04/metadata"&gt;&lt;apiVersion&gt;22.0&lt;/apiVersion&gt;&lt;status&gt;Active&lt;/status&gt;&lt;/ApexClass&gt;' &gt; "classes/${i}.cls-meta.xml"
	fi	
	cp classes/${i}* tmp/classes
done

IFS=',' read -ra file &lt;&lt;&lt; "$pages"
for i in "${file[@]}"; do 
	if [ ! -f "${i}.page-meta.xml" ] 
	then

	echo "&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;ApexPage xmlns=\"http://soap.sforce.com/2006/04/metadata\"&gt;&lt;apiVersion&gt;22.0&lt;/apiVersion&gt;&lt;label&gt;${i}&lt;/label&gt;&lt;/ApexPage&gt;" &gt; "pages/${i}.page-meta.xml"
	
	fi
	cp pages/${i}* tmp/pages
done

IFS=',' read -ra file &lt;&lt;&lt; "$components"
for i in "${file[@]}"; do 
	if [ ! -f "${i}.component-meta.xml" ] 
	then

	echo "&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;ApexComponent xmlns=\"http://soap.sforce.com/2006/04/metadata\"&gt;&lt;apiVersion&gt;22.0&lt;/apiVersion&gt;&lt;label&gt;${i}&lt;/label&gt;&lt;/ApexComponent&gt;" &gt; "components/${i}.component-meta.xml"
	
	fi
	cp components/${i}* tmp/components
done

IFS=',' read -ra file &lt;&lt;&lt; "$triggers"
for i in "${file[@]}"; do 
	if [ ! -f "${i}.trigger-meta.xml" ] 
	then

	echo '&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;ApexTrigger xmlns="http://soap.sforce.com/2006/04/metadata"&gt;&lt;apiVersion&gt;22.0&lt;/apiVersion&gt;&lt;status&gt;Active&lt;/status&gt;&lt;/ApexTrigger&gt;' &gt; "triggers/${i}.triggers-meta.xml"
	
	fi
	cp triggers/${i}* tmp/triggers
done

cp package.xml tmp/
ant build

done

if [ ${usekeychainaccess} == 'enabled' ]
	then 
	cp build.bak build.properties
if [ -f "new.properties" ]  
	then
	rm new.properties
fi
fi

echo "&lt;/pre&gt;"
echo "&lt;div id='output' style='color:black'&gt;&lt;/div&gt;&lt;/div&gt;"

echo "&lt;script&gt;"
echo "output = document.getElementById('output');
output.innerHTML = document.getElementById('output_pre').innerHTML;
document.getElementById('output_pre').style.display='none';
output.innerHTML = output.innerHTML.replace(/\n/gi,'&lt;br /&gt;');
output.innerHTML = output.innerHTML.replace(/BUILD SUCCESSFUL/gi,'&lt;span style=font-weight:bold;color:#526F35&gt;BUILD SUCCESSFUL&lt;/span&gt;');
output.innerHTML = output.innerHTML.replace(/BUILD FAILED/gi,'&amp;nbsp;&lt;span style=font-weight:bold;color:#CD2626&gt;BUILD FAILED&lt;/span&gt;');
output.innerHTML = output.innerHTML.replace(/ERROR:/gi,'&lt;HR /&gt;ERROR:');

output.innerHTML = output.innerHTML.replace(/\(/gi,'&lt;BR /&gt;&lt;span style=background-color:black;color:white&gt;&amp;nbsp;(');
output.innerHTML = output.innerHTML.replace(/\)\:/gi,')&amp;nbsp;&lt;/span&gt; Error Message: &amp;nbsp;&lt;BR /&gt;');
&lt;/script&gt;"

echo "&lt;hr&gt;&lt;button onclick='self.close();' style='border: 1px solid black; background-color:#ccc'&gt;Done&lt;/button&gt;"


</string>
	<key>input</key>
	<string>none</string>
	<key>keyEquivalent</key>
	<string>^~b</string>
	<key>name</key>
	<string>Build Sequential</string>
	<key>output</key>
	<string>showAsHTML</string>
	<key>uuid</key>
	<string>2A8ECF59-0137-4554-AA49-959CB07FA995</string>
</dict>
</plist>
